#+STARTUP: content
#+STARTUP: logdone
#+AUTHOR: Tuomo Syvänperä
#+TODO: TODO DRAFT | DONE

#+HUGO_BASE_DIR: ../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_HUGO_TYPE: post
:END:
** DONE Let's try this blogging thing again                    :hugo:emacs:org:
CLOSED: [2019-05-02 Thu 13:39]
:PROPERTIES:
:EXPORT_FILE_NAME: here-we-go-again
:END:

I've tried a few times in the past to start writing a blog, but it has never
really gotten anywhere. My interest has always waned after the initial
enthusiasm.

So why would this time be any different?

Well it probably won't, but I just had to try and see what it would be like
to blog using just Emacs & Org-mode with a static site generator and having
a highly automated publishing process on top of that.
Now that these static site generators are all the craze, I just had to see
what they're all about.

I chose [[https://gohugo.io/][Hugo]] as my static site generator for a few reasons.
1. It's simple and fast
2. It's written in Go (I've been on a Go kick lately, more about that in a
   future post perhaps)
3. It works really well with Emacs & Org

These days Hugo supports Org mode files natively, but I found that the
suggested workflow of ox-hugo suited me better. And it also seems to
support some Org feature better than the built-in one.

So what *does* my publishing flow look like?

- All posts are written into a single org-mode file. Each post has it's
  own heading under the main /Posts/ heading.
- Each post is an Org /TODO/ entry, that can have 3 different states:
  1. *TODO*: Means that it's just a quick reminder about a possible topic for a
     future post. Usually no  more than a single line.
  2. *DRAFT*: Is just that, a blog post in draft mode. This is not published by
     Hugo, but is shown on my local dev Hugo, which is set to publish drafts too
  3. *DONE*: Which means it's ready to be published. When you mark it as done in
     Org it automatically sets the /CLOSED/ time for it, which is used as the
     publication time in Hugo.
- I use [[https://ox-hugo.scripter.co/][ox-hugo]] to convert the org file to the markdown that Hugo
  supports. I've set it up so that when I save the /posts/ file, Emacs
  automatically kicks in he ox-hugo conversion.
- I run a local Hugo installation (with the help of Prodigy on Emacs) too and
  while I'm writing the post, every time I save it, the browser automatically
  refreshes and navigates to the changed page/post and so I can have a live
  preview of the changes
- When I'm satisfied with the content and ready to go live, I just push the
  changes to the /master/ branch of my blog repo in [[https://github.com/][Github]] and [[http://www.netlify.com][Netlify]]
  automatically picks up the changes and builds and deploys the new version.

#+caption: Here's a screenshot of my setup, editing this very post.
[[/images/img-2019-05-02-132213.png]]

What's next? Well I'd at least want to replace the theme of my blog with
something a bit nicer, but I'm not interested in tweaking HTML & CSS right
now, so that's just gonna have to wait.

There are a couple of tweaks I'd like to do to the publishing flow (like
easier handling of images and screenshots etc) and now I'm sure there's
a bunch of keyboard shortcuts and other enhancements I need to do to Emacs
to make it easier to work with, but for now this seems to work just fine.

I'm also determined to get my task management and note taking in better shape
and I'm sure Emacs and org-mode will be playing a major role in that also.
I have already started to streamline the way I can add todos and notes with
org-capture, but there are a few things missing there still. I'm sure I will
write about the setup once it's up and running and I've had some time to battle
test it.

Getting this workflow figured out and and tweaking my environment has been a
great deal of fun. Lately I've been moving more and more of my other activities
to Emacs and command line and it's going to take some time to get it all set up
just the way I want it and get everything running as smoothly as possible.

So maybe that at least gives me more material to write about here.

** DONE Adding screenshots to a post                               :hugo:emacs:
CLOSED: [2019-05-04 Sat 21:38]
:PROPERTIES:
:EXPORT_FILE_NAME: adding-screenshots-to-a-post
:END:

In my previous post I mentioned that one thing I would like to tweak in my
blogging workflow is to have an easier method of adding screenshots to my posts.

And here's what I came up with for now.

The winning combination: [[https://flameshot.js.org/#/][Flameshot]] & Emacs [[https://github.com/joaotavora/yasnippet][YASnippets]]

I've setup a keyboard shortcut (=Super+Shift+4=, a nod towards macOS shortcuts)
that launches Flameshot, which allows me to take the actual screenshot. When I
save the shot, I've set it up so that it automatically saves it to
=~/Pictures/Screenshots= folder with the name =scrot-<timestamp>.png=

Then I have a snippet called =scrot= defined (using YASnippet), which calls a
small elisp function that calls a simple shell script, which copies the latest
screenshot from the =~/Pictures/Screenshots= folder to my Hugo static image
folder and also returns the proper path to the image which can be used in a Hugo
=figure=.

So basically all I do is hit =Super+Shift+4=, take the shot and in Emacs I just
type =scrot= and hit ~TAB~, write the caption and bam! Instant embedded
screenshot!

Below you can see the YASnippet definition, elisp function and shell script used.

#+caption: The snippet that inserts the Hugo figure
#+BEGIN_SRC elisp
# -*- mode: snippet -*-
# name: Add latest screenshot as a Hugo figure
# key: scrot
# --
#+caption: $0
[[`(ts/scrot-to-blog)`]]
#+END_SRC

#+caption: The elisp function called from the snippet
#+BEGIN_SRC elisp
(defun ts/scrot-to-blog ()
  (interactive)
  (shell-command-to-string "~/scripts/scrot-to-blog.sh"))
#+END_SRC

#+caption: And finally the shell script that does the actual work
#+BEGIN_SRC bash
#!/usr/bin/env bash

filemask=~/Pictures/Screenshots/scrot-*
blog_img_dir=~/projects/personal/tiniblog/static/images

unset -v latest
for file in $filemask; do
  [[ $file -nt $latest ]] && latest=$file
done

if [[ ! -z "$latest" ]]
then
  cp $latest $blog_img_dir
  echo -n "/images/$(basename $latest)"
fi
#+END_SRC

Next step? I'd probably like to try and convert the shell script to elisp so I
could get rid of the shell script altogether. Of course the shell script has the
added benefit of being able to use it outside of Emacs.

But then again, why would I ever want to do anything outside of Emacs?

** DONE Writing a Snippet Manager in Go
CLOSED: [2019-05-17 Fri 11:31]
:PROPERTIES:
:EXPORT_FILE_NAME: writing-a-snippet-manager-in-go
:END:

As I mentioned in an earlier post, I've been fooling around with Go quite a bit
lately and was looking for a good project with which to flex my Go muscles.

There are quite a few snippet managers in the world already, but most of the
best ones have a GUI and I was looking for something that I could use
exclusively on the command line.

I found a few command line ones too, like [[https://github.com/jarun/Buku][Buku]] and [[https://github.com/knqyf263/pet][Pet]], but none of them were
quite what I was looking for. Buku is great for managing bookmarks and Pet for
shell command snippets, but I wanted something that could handle all my snippet
needs in one package.

So I decided to write one. And in Go as that's my language of choice right now,
especially for command line apps.

It's called [[https://github.com/syvanpera/gossip][Gossip]] (don't ask, of course it had to start with *Go* and it kinda
sounds like snip, so there you go).

It's still in it's early stages, there's no way to edit the snippets yet (other
than adding tags) and I have a lot of stuff on the backlog that I'd like to add
to it, but it's already quite usable.

So what do I think of Go after this small excursion into it?

Well, I really really like it but then again some things I have a mixed feeling
about. I love some features like the deferred function calls and the structural
typing. But some things like the extensive use of ~nil~ isn't really my thing.
And the language, or some popular libraries at least (looking at you [[https://github.com/spf13/cobra][Cobra]] and
[[https://github.com/spf13/viper][Viper]]) seem to encourage the use of global state and variables quite heavily.
But global stuff does make some things easier too, if you use them sparingly.

And Go seems like a perfect fit for REST API servers and microservices. Actually
if you would ask me right now, I would certainly recommend Go over Node in the
backend for these. And the fact that Go is really quite simple and the compiler
is crazy fast, makes the development cycle almost as fast as when using JS &
Node.

In some ways, even though it's a relatively new language, Go seems like the old
friend I've missed for a long time. It feels like a blast from the past from my
C-programming days, but then again it's modern and fresh.

What really took me by surprise, is that even though I've been a proponent for
functional programming languages and style for some time know, I still managed
to keep an open mind and embrace a language that certainly is in no way or shape
a functional language.

Next step for me is to start getting the know the concurrent side of Go, as
that's where the real beef is in Go.

I'm sure I will post more Go stuff in the future, but I need to play around with
it some more first.

In the mean time, check out [[https://github.com/syvanpera/gossip][Gossip]] at Github if you're interested. I think it's
pretty neat!

#+caption: Here's a gif of Gossip in action
[[/images/gossip-demo.gif]]

* COMMENT Local Variables                                              :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
